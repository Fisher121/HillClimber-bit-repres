#include <stdio.h>
#include <math.h>
#include<time.h>
#include <vector>
#include <iostream>
#define pi 3.14159265359
float a, b;
int prec, n, l, L;

using namespace std;
float decode(vector<char>::iterator  it_start, vector<char>::iterator it_end)
{

    int x_int = 0;
    float x_scaled;
    for (vector<char>::iterator it = it_start; it != it_end; it++)
    {
        x_int *= 2;
        x_int += *it;
    }

    x_scaled = x_int / (pow(2, l) - 1);

    return x_scaled * (b - a) + a;
}


vector<float> decode_values(vector<char>& bits)
{
    vector<char>::iterator it_start, it_end;
    vector<float> values;

    for (int ii = 0; ii < n; ++ii)
    {
        int start = ii * l;
        int end = start + l;
        it_start = bits.begin() + start;
        it_end = bits.begin() + end;
        float x = decode(it_start, it_end);
        values.push_back(x);
    }
    return values;
}
vector<vector<char>> generate_neighborhood(vector<char>& bits)
{
    vector<vector<char>> neighborhood;
    for (int ii = 0; ii < bits.size(); ++ii)
    {
        bits[ii] = !bits[ii];
        neighborhood.push_back(bits);
        bits[ii] = !bits[ii];
    }
    return neighborhood;
}
float DeJong(vector<float> values)
{
    float sum = 0;
    for (int i = 0; i <= n - 1; i++)
    {
        sum = sum + values[i] * values[i];
    }
    return sum;
}
float Schwefel(vector<float>values)
{
    float sum = 0;
    for (int i = 0; i <= n - 1; i++)
    {
        sum = sum - values[i] * sin(sqrt(abs(values[i])));
    }
    return sum;
}
float Michalewicz(vector<float>values)
{
    float sum = 0;
    for (int i = 0; i <= n - 1; i++)
    {
        sum = sum+sin(values[i])*pow(sin(i*values[i]*values[i]/pi),20);
    }
    return -sum;
}
float Rastrigin(vector<float>values)
{
    float sum = 0;
    for (int i = 0; i <= n - 1; i++)
    {
        sum = sum +(values[i]*values[i]-10*cos(2*pi*values[i]));
    }
    return sum+10*n;
}
int eval(vector<char> solution, vector<char> best, float (*function)(vector<float>))
{
    float function_y, best_y;
    function_y = function(decode_values(solution));
    best_y = function(decode_values(best));
    if (function_y < best_y)
        return 1;
    else
        return 0;
}
vector<char> Best_Improve(vector<vector<char>> neighborhood, float(*function)(vector<float>))
{
    int x;
    vector<char> best = neighborhood[0];
    for (int i = 0; i <= L - 1; i++)
    {
        if (x = eval(neighborhood[i], best, function))
            best = neighborhood[i];
    }
    return best;
}
vector<char> First_Improve(vector<vector<char>> neighborhood, float(*function)(vector<float>))
{
    int x;
    vector<char> best = neighborhood[0];
    for (int i = 0; i <= L - 1; i++)
    {
        if (x = eval(neighborhood[i], best, function))
            return neighborhood[i];
    }
    return best;
}
float HillClimber(int MAX, vector<char>(*improve)(vector<vector<char>>, float(*)(vector<float>)), float(*function)(vector<float>), int a1, int b1, int n1, int prec1)
{
    a = a1;
    b = b1;
    n = n1;
    prec = prec1;
    float NoP;
    int t = 0;
    bool local;
    NoP = (b - a) * pow(10, prec);
    l = ceil(log(NoP) / log(2));
    L = l * n;
    srand(time(0));
    vector<char> candidate_solution = vector<char>(L, 1);
    vector<vector<char>> neighborhood;
    vector<char> best = vector<char>(L, 1), neighbour;
    do
    {
        local = false;
        for (int i = 0; i <= L - 1; i++)
        {
            candidate_solution[i] = rand() % 2;
        }
        do
        {
            neighborhood = generate_neighborhood(candidate_solution);
            neighbour = improve(neighborhood, function);
            if (eval(neighbour, candidate_solution, function))
                candidate_solution = neighbour;
            else
                local = true;
        } while (!local);
        t++;
        if (eval(candidate_solution, best, function))
        {
            best = candidate_solution;

        }
    } while (t < MAX);
    return function(decode_values(best));
}
float findStandardDeviation(float* array, int count) {
    float sum = 0.0, sDeviation = 0.0, mean;
    int i;

    for (i = 0; i < count; i++) {
        sum += array[i];
    }
    mean = sum / count;

    for (i = 0; i < count; ++i) {
        sDeviation += pow(array[i] - mean, 2);
    }

    return sqrt(sDeviation / count);
}
int main()
{
    n = 2;
    int repeats = 30, r=10000;
    float med = 0, stdev = 0, x, values[31], min = n*500, max = n * (-500);
    for (int i = 1; i <= repeats; i++)
    {
        values[i - 1] = HillClimber(r, Best_Improve,DeJong, -5.12,5.12, n, 2);
        printf("%f\n", values[i - 1]);
        if (values[i - 1] < min)
            min = values[i - 1];
        if (values[i - 1] > max)
            max = values[i - 1];
        med = med + values[i - 1];
    }
    med = med / 30;
    stdev = findStandardDeviation(values, repeats);
    cout << "n : " << r << endl << "med : " << med << endl << "stdev : " << stdev << endl << "max : " << max << endl << "min : " << min << endl;
    long long int ticks = clock();
    cout << "time : " << (float)ticks / CLOCKS_PER_SEC << endl;
}
